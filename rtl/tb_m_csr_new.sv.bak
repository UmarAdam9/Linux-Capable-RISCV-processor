`include "interface_defs2.sv"
`timescale 1ns/1ps

module tb_m_csr_new;

  // Clock and reset
  logic clk;
  logic rst;

  // Inputs
  logic [1:0] csr_ops_in;
  logic [2:0] sys_ops_in;
  logic exc_req_in;
  logic irq_req_in;
  logic csr_rd_req_in;
  logic csr_wr_req_in;
  logic fence_i_req_in;
  logic [11:0] csr_addr_in;
  logic [31:0] pc_in;
  logic [31:0] instr_in;
  logic [31:0] csr_wdata_in;
  logic [3:0] exc_code_in;
  logic instr_flushed_in;
  logic pipe_stall_in;
  logic [31:0] timer_val_low_in;
  logic [31:0] timer_val_high_in;
  logic [31:0] csr_mhartid_in;
  logic [1:0] ext_irq_in;
  logic timer_irq_in;
  logic soft_irq_in;
  logic uart_irq_in;
  
  // Custom type inputs (define these properly in your environment)
  type_LSU_to_CSR_ctrl LSU_to_CSR_ctrl_in;
  type_LSU_to_CSR_data LSU_to_CSR_data_in;

  // Outputs
  logic [31:0] csr_rdata_o;
  logic new_pc_req_o;
  logic irq_flush_lsu_o;
  logic wfi_req_o;
  logic csr_read_req_o;
  logic [1:0] priv_mode_o;
  logic [31:0] pc_new_o;
  logic irq_req_o;
  type_CSR_to_LSU_data CSR_to_LSU_data_out;
  logic [`XLEN - 1 : 0] reg_value;

  // Instantiate the DUT
  m_csr_new dut (
    .rst(rst),
    .clk(clk),
    .out(),  // if you need this, connect it
    .csr_ops_in(csr_ops_in),
    .sys_ops_in(sys_ops_in),
    .exc_req_in(exc_req_in),
    .irq_req_in(irq_req_in),
    .csr_rd_req_in(csr_rd_req_in),
    .csr_wr_req_in(csr_wr_req_in),
    .fence_i_req_in(fence_i_req_in),
    .csr_addr_in(csr_addr_in),
    .pc_in(pc_in),
    .instr_in(instr_in),
    .csr_wdata_in(csr_wdata_in),
    .exc_code_in(exc_code_in),
    .instr_flushed_in(instr_flushed_in),
    .pipe_stall_in(pipe_stall_in),
    .timer_val_low_in(timer_val_low_in),
    .timer_val_high_in(timer_val_high_in),
    .csr_mhartid_in(csr_mhartid_in),
    .ext_irq_in(ext_irq_in),
    .timer_irq_in(timer_irq_in),
    .soft_irq_in(soft_irq_in),
    .uart_irq_in(uart_irq_in),
    .LSU_to_CSR_ctrl_in(LSU_to_CSR_ctrl_in),
    .LSU_to_CSR_data_in(LSU_to_CSR_data_in),
    .csr_rdata_o(csr_rdata_o),
    .new_pc_req_o(new_pc_req_o),
    .irq_flush_lsu_o(irq_flush_lsu_o),
    .wfi_req_o(wfi_req_o),
    .csr_read_req_o(csr_read_req_o),
    .priv_mode_o(priv_mode_o),
    .pc_new_o(pc_new_o),
    .irq_req_o(irq_req_o),
    .CSR_to_LSU_data_out(CSR_to_LSU_data_out),
    .reg_value(reg_value)
  );

  // Clock generator
  always #5 clk = ~clk;

  // Test procedure
  initial begin
    // Initialize signals
    clk = 0;
    rst = 1;
    #20;
    rst = 0;

    // Stimuli example
    csr_ops_in = 2'b01;
    sys_ops_in = 3'b001;
    exc_req_in = 0;
    irq_req_in = 0;
    csr_rd_req_in = 1;
    csr_wr_req_in = 0;
    fence_i_req_in = 0;
    csr_addr_in = 12'h300;
    pc_in = 32'h0000_1000;
    instr_in = 32'h0000_0073; // maybe ECALL or similar
    csr_wdata_in = 32'hdeadbeef;
    exc_code_in = 4'b0010;
    instr_flushed_in = 0;
    pipe_stall_in = 0;
    timer_val_low_in = 32'h0000_0001;
    timer_val_high_in = 32'h0000_0000;
    csr_mhartid_in = 32'h0000_0000;
    ext_irq_in = 2'b00;
    timer_irq_in = 0;
    soft_irq_in = 0;
    uart_irq_in = 0;

    // Assuming the custom types have default constructors
    LSU_to_CSR_ctrl_in = '{default: '0};
    LSU_to_CSR_data_in = '{default: '0};

    #20;

    // Try write request
    csr_wr_req_in = 1;
    csr_rd_req_in = 0;
    csr_wdata_in = 32'h12345678;
    #20;

    // Add more test scenarios here

    $finish;
  end

endmodule
